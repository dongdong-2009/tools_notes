---------------------------------------------------------------------------------------------
1
---------------------------------------------------------------------------------------------
Linuxカーネルをデバッガで追っていくときに、コンパイラの最適化のために
アドレスとソースの対応づけや変数のメモリ割り当ての情報が失われてしまっていたり、インライン展開されてしまっていたりして、
意図したようにデバッガが動かないことがあります。

こんなときはコンパイラの最適化を抑止する-O0(大文字のオーの後に数字のゼロ)のコンパイルオプションをつければよいのですが、
全てのソースを-O0でコンパイルすると動かなくなってしまうこともあります。

//そこで、特定のファイルだけのコンパイルオプションを追加する方法を紹介します。

ソースファイルのあるMakefikeに以下のような行を追加します。

CFLAGS_(オブジェクトファイル名) = コンパイルオプション
例えば、init/main.c だけに -O0 オプション を追加するには

init/Makefileに以下の行を追加します。

CFLAGS_main.o = -O0
-Oオプションは複数ついている場合には後ろにあるほうが有効になります。これで全体には-O2がついていても、これを指定したファイルだけは
-O0でコンパイルすることになります。

これで意図したとおりに、コンパイルオプションが追加されたかを確認するには、makeのときにV=1 をつけるのが便利です。

 $ make V=1
これでmakeのときに実行される各コマンドのコマンドラインオプションが全て表示されます。



---------------------------------------------------------------------------------------------
2
---------------------------------------------------------------------------------------------
//LinuxカーネルHack: 特定ファイルのコンパイルオプション変更


例えば、net/ipv4/icmp.cにあるicmp_echoのコンパイラ最適化をやめたいとする。
その場合、Makefileに以下のように追記することで、icmp.cの最適化を抑制できる。

 obj-$(CONFIG_XFRM) += xfrm4_policy.o xfrm4_state.o xfrm4_input.o \
                      xfrm4_output.o
+
+CFLAGS_icmp.o = -O0

そして、makeに V=1 を付加してmakeして、ビルドログを見る
% make V=1 ARCH=um 2>&1 | tee build.log

ビルドログを見ると、確かに-O0オプションが付加(-fno-strict-overflowの後)されている。

//GCC -D/-U option: マクロ定義/削除
//下記logは、見やすくするため、行を変えた

% cat build.log
.......
gcc -Wp,-MD,net/ipv4/.icmp.o.d  -nostdinc -isystem /usr/lib/gcc/i486-linux-gnu/4.2.4/include 
-I/home/xxx/linux-2.6/arch/um/include 
-Iinclude  -include include/generated/autoconf.h 
-D__KERNEL__ 
-I/home/xxx/linux-2.6/arch/um/sys-i386 
-I/home/xxx/linux-2.6/arch/x86/include 
-Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -Werror-implicit-function-declaration 
-Wno-format-security -fno-delete-null-pointer-checks 
-Os -D__arch_um__ -DSUBARCH=\"i386\" 
-I/home/xxx/linux-2.6/arch/um/include/shared 
-I/home/xxx/linux-2.6/arch/um/sys-i386/shared 
-I/home/xxx/linux-2.6/arch/um/include/shared/skas 
-Dvmap=kernel_vmap -Din6addr_loopback=kernel_in6addr_loopback -Din6addr_any=kernel_in6addr_any -funit-at-a-time 
-march=i686 -Wa,-mtune=generic32 -mpreferred-stack-boundary=2 -ffreestanding -D_LARGEFILE64_SOURCE -Derrno=kernel_errno 
-Dsigprocmask=kernel_sigprocmask -Dmktime=kernel_mktime -fno-stack-protector -fno-omit-frame-pointer -fno-optimize-sibling-calls 
-g -Wdeclaration-after-statement -Wno-pointer-sign -fno-strict-overflow -O0
-D"KBUILD_STR(s)=#s" -D"KBUILD_BASENAME=KBUILD_STR(icmp)"  -D"KBUILD_MODNAME=KBUILD_STR(icmp)"  -c -o net/ipv4/icmp.o net/ipv4/icmp.c
..............


//
//gcc -Wp,-MD,...  
//から
//-D"KBUILD_STR(s)=#s" -D"KBUILD_BASENAME=KBUILD_STR(icmp)"  -D"KBUILD_MODNAME=KBUILD_STR(icmp)"  -c -o net/ipv4/icmp.o net/ipv4/icmp.c
//までが、一つのビルド単位？


gdbで試すと、ちゃんとnetが見られるようになった。
(gdb) b icmp_echo
Breakpoint 1 at 0x819a475: file net/ipv4/icmp.c, line 828.
(gdb) c
Continuing.

Breakpoint 1, icmp_echo (skb=0x9c7a5c0) at net/ipv4/icmp.c:828
828     {
(gdb) l
823      *                echo requests, MUST have default=NOT.
824      *      See also WRT handling of options once they are done and working.
825      */
826
827     static void icmp_echo(struct sk_buff *skb)
828     {
829             struct net *net;
830
831             net = dev_net(skb_dst(skb)->dev);
832             if (!net->ipv4.sysctl_icmp_echo_ignore_all) {
(gdb) p net
$1 = (struct net *) 0x81c522c
