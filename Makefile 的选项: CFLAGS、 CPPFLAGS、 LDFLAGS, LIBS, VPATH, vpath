        Makefile 的选项: CFLAGS、 CPPFLAGS、 LDFLAGS, LIBS 的区别

-------------------------------------------------------------------------------------
1.
-------------------------------------------------------------------------------------
CFLAGS 表示用于 C 编译器的选项， CXXFLAGS 表示用于 C++ 编译器的选项。
这两个变量实际上涵盖了编译和汇编两个步骤。

CFLAGS： 指定头文件（.h文件）的路径，
        如：CFLAGS=-I/usr/include -I/path/include。同样地，安装一个包时会在安装路径下建立一个include目录，
        当安装过程中出现问题时，试着把以前安装的包的include目录加入到该变量中来。

LDFLAGS： gcc 等编译器会用到的一些优化参数，也可以在里面指定库文件的位置。
        用法：LDFLAGS=-L/usr/lib -L/path/to/your/lib。每安装一个包都
        几乎一定的会在安装目录里建立一个lib目录。如果明明安装了某个包，而安装另一个包时，它愣是说找不到，可以抒那个包的lib路径加入的LDFALGS中试一下。

LIBS：告诉链接器要链接哪些库文件，如LIBS = -lpthread -liconv


简单地说，
LDFLAGS是告诉链接器从哪里寻找库文件，
LIBS是告诉链接器要链接哪些库文件。
不过使用时链接阶段这两个参数都会加上， 所以即使将这两个的值互换，也没有问题。

有时候LDFLAGS指定-L,虽然能让链接器找到库进行链接，但是运行时链接器却找不到这个库，
如果要让软件运行时,库文件的路径也得到扩展，那么我们需要增加这两个库给"-Wl,R"：

LDFLAGS = -L/var/xxx/lib -L/opt/mysql/lib -Wl,R/var/xxx/lib -Wl,R/opt/mysql/lib

如果在执行./configure以前设置环境变量:
    export LDFLAGS="-L/var/xxx/lib -L/opt/mysql/lib -Wl,R/var/xxx/lib -Wl,R/opt/mysql/lib" ，

那么执行configure以后， Makefile将会设置这个选项，链接时会有这个参数，编译出来的可执行程序的库文件搜索路径就得到扩展了。


-------------------------------------------------------------------------------------
2. Makefile VPATH 和 vpath 的使用
-------------------------------------------------------------------------------------
在一些大的工程中，有大量的源文件，我们通常的做法是把这许多的源文件分类，并存放在不同的目录中。
所以，当make需要去找寻文件的依赖关系时，你可以在文件前加上路径，但最好的方法是把一个路径告诉make，让make在自动去找。

Makefile文件中的特殊变量“VPATH”就是完成这个功能的，如果没有指明这个变量，make只会在当前的目录中去找寻依赖文件和目标文件。
如果定义了这个变量，那么，make就会在当当前目录找不到的情况下，到所指定的目录中去找寻文件了。
    VPATH = src:../headers

上面的的定义指定两个目录，“src”和“../headers”， make会按照这个顺序进行搜索。目录由“冒号”分隔。（当然，当前目录永远是最高优先搜索的地方）

另一个设置文件搜索路径的方法是使用make的“vpath”关键字（注意，它是全小写的）， 这不是变量，这是一个make的关键字.
这和上面提到的那个VPATH变量很类似，但是它更为灵活。 它可以指定不同的文件在不同的搜索目录中。
这是一个很灵活的功能,它的使用方法有三种：

    1、vpath <pattern> <directories>
           为符合模式<pattern>的文件指定搜索目录<directories>。
    2、vpath <pattern>
           清除符合模式<pattern>的文件的搜索目录。
    3、vpath
           清除所有已被设置好了的文件搜索目录。
